mySort.txt

Heap Sort Algorithm by TeamZelda
Date: February 29, 2024

# Description

Heap Sort is a comparison-based sorting algorithm. It uses a binary heap data structure. It can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step.


## Pseudocode
HEAP_SORT(arr, comparator)
    n = length(arr)

    // Build heap (rearrange array)
    for i from n/2 - 1 down to 0
        HEAPIFY(arr, n, i, comparator)

    // One by one extract an element from heap
    for i from n - 1 down to 1
        // Move current root to end
        Swap arr[0] with arr[i]

        // call max heapify on the reduced heap
        HEAPIFY(arr, i, 0, comparator)

HEAPIFY(arr, n, i, comparator)
    largest = i // Initialize largest as root
    l = 2*i + 1 // left = 2*i + 1
    r = 2*i + 2 // right = 2*i + 2

    // If left child is larger than root
    if l < n and comparator.compare(arr[l], arr[largest]) > 0
        largest = l

    // If right child is larger than largest so far
    if r < n and comparator.compare(arr[r], arr[largest]) > 0
        largest = r

    // If largest is not root
    if largest != i
        Swap arr[i] with arr[largest]

        // Recursively heapify the affected sub-tree
        HEAPIFY(arr, n, largest, comparator)
## Complexity Analysis

### Time Complexity:
* Best Case Scenario: O(n log n)
* Average Case Scenario: O(n log n)
* Worst Case Scenario: O(n log n)
The time complexity remains to be O (n log n) across all cases because of the binary heap structure. The heapification process organizes the data into a heap to ensure sorting takes place in log time for each of the n elements.

### Space Complexity: O(1)

The Heap Sort algorithm sorts in place. This means it requires no additional memory space beyond the original array.


## Operational Steps
* BUILD_HEAP: Turn the array into a heap structure, where the parent node's value is ordered according to the comparator for each child node.
* EXTRACT_ROOT: Swap the first element (root of the heap) with the last element in the array.
* SHRINK_HEAP: Decrease the heap's size by one to remove the last element from the heap consideration.
* RESTORE_HEAP: Apply the heapify process to the new root to maintain the heap structure.
* REPEAT: Continue the extract and heapify process until only one element is left in the heap.