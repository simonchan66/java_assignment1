mySort.txt

Heap Sort Algorithm by TeamZelda
Date: February 29, 2024

# Description

Heap Sort is a comparison-based sorting algorithm that uses a binary heap data structure. It can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step.


## Pseudocode I

HEAP_SORT(arr)
    BUILD_MAX_HEAP(arr)
    for i from length(arr) down to 2
        SWAP arr[1] with arr[i]
        HEAP_SIZE = HEAP_SIZE - 1
        MAX_HEAPIFY(arr, 1)

BUILD_MAX_HEAP(arr)
    HEAP_SIZE = length(arr)
    for i from floor(length(arr)/2) down to 1
        MAX_HEAPIFY(arr, i)

MAX_HEAPIFY(arr, i)
    left = 2*i
    right = 2*i + 1
    if left <= HEAP_SIZE and arr[left] > arr[i]
        largest = left
    else
        largest = i
    if right <= HEAP_SIZE and arr[right] > arr[largest]
        largest = right
    if largest != i
        SWAP arr[i] with arr[largest]
        MAX_HEAPIFY(arr, largest)
        
## Pseudocode II
HEAP_SORT(arr, comparator)
    n = length(arr)

    // Build heap (rearrange array)
    for i = n/2 - 1 down to 0
        HEAPIFY(arr, n, i, comparator)

    // One by one extract an element from heap
    for i = n - 1 down to 1
        // Move current root to end
        temp = arr[0]
        arr[0] = arr[i]
        arr[i] = temp

        // call max heapify on the reduced heap
        HEAPIFY(arr, i, 0, comparator)

HEAPIFY(arr, n, i, comparator)
    largest = i // Initialize largest as root
    l = 2*i + 1 // left = 2*i + 1
    r = 2*i + 2 // right = 2*i + 2

    // If left child is larger than root
    if l < n and comparator.compare(arr[l], arr[largest]) > 0
        largest = l

    // If right child is larger than largest so far
    if r < n and comparator.compare(arr[r], arr[largest]) > 0
        largest = r

    // If largest is not root
    if largest != i
        swap = arr[i]
        arr[i] = arr[largest]
        arr[largest] = swap

        // Recursively heapify the affected sub-tree
        HEAPIFY(arr, n, largest, comparator)

## Complexity Analysis

### Time Complexity:
* Best Case:  O (n log n)
* Average Case:  O (n log n)
* Worst Case:  O (n log n)
The time complexity remains  O (n log n) across all cases due to the nature of the binary heap structure and the process of heapification.

### Space Complexity: O(1)

The Heap Sort algorithm sorts in place, so it doesn't require any extra storage other than what's needed to hold the initial list.


## Operational Steps
* BUILD_MAX_HEAP: Convert the input array into a max-heap â€“ a binary tree where the main parent node has a value greater than its children.
* SWAP: The root (maximum value) of the heap with the last element of the heap.
* REDUCE: The size of the heap by 1 and heapify the root again.
* REPEAT: The process until the size of the heap is 1.